parameters:
- name: RunOnnxRuntimeTests
  displayName: Run Tests?
  type: boolean
  default: true

- name: DoCompliance
  displayName: Run Compliance Tasks?
  type: boolean
  default: true

- name: DoEsrp
  displayName: Run code sign tasks? Must be true if you are doing an Onnx Runtime release.
  type: boolean
  default: false

- name: IsReleaseBuild
  displayName: Is a release build? Set it to true if you are doing an Onnx Runtime release.
  type: boolean
  default: false

- name: AdditionalBuildFlags
  displayName: Additional build flags for build.py
  type: string
  default: --use_openmp

- name: OrtNugetPackageId
  displayName: Package name for nuget
  type: string
  default: 'Microsoft.ML.OnnxRuntime'

jobs:
- job: Linux_C_API_Packaging_CPU_x64
  workspace:
    clean: all
  timeoutInMinutes:  60
  pool: 'Linux-CPU'
  steps:
    - template: set-version-number-variables-step.yml
    - template: get-docker-image-steps.yml
      parameters:
        Dockerfile: tools/ci_build/github/linux/docker/Dockerfile.centos
        Context: tools/ci_build/github/linux/docker
        DockerBuildArgs: "--build-arg BUILD_UID=$( id -u )"
        Repository: onnxruntimecentoscpubuild
    - task: CmdLine@2
      inputs:
        script: |
          mkdir -p $HOME/.onnx
          docker run --rm --volume /data/onnx:/data/onnx:ro --volume $(Build.SourcesDirectory):/onnxruntime_src --volume $(Build.BinariesDirectory):/build \
          --volume $HOME/.onnx:/home/onnxruntimedev/.onnx -e NIGHTLY_BUILD onnxruntimecentoscpubuild python3 \
          /onnxruntime_src/tools/ci_build/build.py --build_java --build_dir /build --config Release \
          --skip_submodule_sync  --parallel --build_shared_lib ${{ parameters.AdditionalBuildFlags }}
        workingDirectory: $(Build.SourcesDirectory)

    - script: |
       set -e -x       
       mkdir $(Build.ArtifactStagingDirectory)/testdata
       cp $(Build.BinariesDirectory)/Release/libcustom_op_library.so* $(Build.ArtifactStagingDirectory)/testdata 
       ls -al $(Build.ArtifactStagingDirectory)
      displayName: 'Create Artifacts'

    - task: PublishPipelineArtifact@0
      displayName: 'Publish Pipeline Artifact'
      inputs:
        artifactName: 'drop-linux'
        targetPath: '$(Build.ArtifactStagingDirectory)'

    - template: java-api-artifacts-package-and-publish-steps-posix.yml
      parameters:
          arch: 'linux-x64'
          buildConfig: 'Release'
          artifactName: 'onnxruntime-java-linux-x64'
          version: '$(OnnxRuntimeVersion)'
          libraryName: 'libonnxruntime.so'
          nativeLibraryName: 'libonnxruntime4j_jni.so'

    - template: c-api-artifacts-package-and-publish-steps-posix.yml
      parameters:
          buildConfig: 'Release'
          artifactName: 'onnxruntime-linux-x64-$(OnnxRuntimeVersion)'
          artifactNameNoVersionString: 'onnxruntime-linux-x64'
          libraryName: 'libonnxruntime.so.$(OnnxRuntimeVersion)'
          commitId: $(OnnxRuntimeGitCommitHash)

    - template: component-governance-component-detection-steps.yml
      parameters :
        condition : 'succeeded'
    - template: clean-agent-build-directory-step.yml

- job: MacOS_C_API_Packaging_CPU_x64
  workspace:
    clean: all
  pool: 
    vmImage: 'macOS-10.14'
  timeoutInMinutes:  120
  steps:
    - template: set-version-number-variables-step.yml

    - script: |
        set -e
        pushd .
        cd $(Build.SourcesDirectory)/cmake/external/protobuf
        cmake ./cmake -DCMAKE_INSTALL_PREFIX=$(Build.BinariesDirectory)/protobuf -DCMAKE_POSITION_INDEPENDENT_CODE=ON -Dprotobuf_BUILD_TESTS=OFF -DCMAKE_BUILD_TYPE=Relwithdebinfo
        make -j$(getconf _NPROCESSORS_ONLN)
        make install
        popd
        export PATH=$(Build.BinariesDirectory)/protobuf/bin:$PATH
        export ONNX_ML=1
        export CMAKE_ARGS="-DONNX_GEN_PB_TYPE_STUBS=OFF -DONNX_WERROR=OFF"
        sudo python3 -m pip install -r '$(Build.SourcesDirectory)/tools/ci_build/github/linux/docker/scripts/requirements.txt'
        sudo xcode-select --switch /Applications/Xcode_10.app/Contents/Developer
        brew install libomp
        python3 $(Build.SourcesDirectory)/tools/ci_build/build.py --build_java ${{ parameters.AdditionalBuildFlags }} --build_dir $(Build.BinariesDirectory) --skip_submodule_sync --parallel --build_shared_lib --config Release
      displayName: 'Build and Test MacOS'
    - template: c-api-artifacts-package-and-publish-steps-posix.yml
      parameters:
          buildConfig: 'Release'
          artifactName: 'onnxruntime-osx-x64-$(OnnxRuntimeVersion)'
          artifactNameNoVersionString: 'onnxruntime-osx-x64'
          libraryName: 'libonnxruntime.$(OnnxRuntimeVersion).dylib'
          commitId: $(OnnxRuntimeGitCommitHash)

    - script: |
       set -e -x       
       mkdir $(Build.ArtifactStagingDirectory)/testdata
       cp $(Build.BinariesDirectory)/Release/libcustom_op_library.dylib $(Build.ArtifactStagingDirectory)/testdata
      displayName: 'Create Artifacts'

    - task: PublishPipelineArtifact@0
      displayName: 'Publish Pipeline Artifact'
      inputs:
        artifactName: 'drop-osx'
        targetPath: '$(Build.ArtifactStagingDirectory)'

    - template: java-api-artifacts-package-and-publish-steps-posix.yml
      parameters:
          arch: 'osx-x64'
          buildConfig: 'Release'
          artifactName: 'onnxruntime-java-osx-x64'
          version: '$(OnnxRuntimeVersion)'
          libraryName: 'libonnxruntime.dylib'
          nativeLibraryName: 'libonnxruntime4j_jni.dylib'

    - template: component-governance-component-detection-steps.yml
      parameters :
        condition : 'succeeded'
    - template: clean-agent-build-directory-step.yml

- job: Windows_Packaging_CPU
  workspace:
    clean: all
  pool: 'Win-CPU-2019'
  timeoutInMinutes:  300
  strategy:
    matrix: 
      x86:
        EnvSetupScript: setup_env_x86.bat
        buildArch: x86
        msbuildArch: x86
        msbuildPlatform: Win32
        packageName: x86
        buildparameter: --x86
        runTests: ${{ parameters.RunOnnxRuntimeTests }}
        build_java: false
      x64:
        EnvSetupScript: setup_env.bat
        buildArch: x64
        msbuildArch: amd64
        msbuildPlatform: x64
        packageName: x64
        buildparameter: --build_java
        runTests: ${{ parameters.RunOnnxRuntimeTests }}
        build_java: true
      arm:
        EnvSetupScript: setup_env.bat
        buildArch: x64
        msbuildArch: amd64
        msbuildPlatform: arm
        packageName: arm
        buildparameter: --arm
        runTests: false
        build_java: false
      arm64:
        EnvSetupScript: setup_env.bat
        buildArch: x64
        msbuildArch: amd64
        msbuildPlatform: arm64
        packageName: arm64
        buildparameter: --arm64  --build_java
        runTests: false
        build_java: false
  steps:
    - template: telemetry-steps.yml
    
    - task: UsePythonVersion@0
      inputs: 
        versionSpec: '3.7' 
        addToPath: true 
        architecture: $(buildArch)

    - task: BatchScript@1
      displayName: 'setup env'
      inputs:
        filename: '$(Build.SourcesDirectory)\tools\ci_build\github\windows\$(EnvSetupScript)'
        modifyEnvironment: true
        workingFolder: '$(Build.BinariesDirectory)'

    - script: |
       python -m pip install -q pyopenssl setuptools wheel numpy
      workingDirectory: '$(Build.BinariesDirectory)'
      displayName: 'Install python modules' 
    - powershell: |
       $Env:USE_MSVC_STATIC_RUNTIME=1
       $Env:ONNX_ML=1
       $Env:CMAKE_ARGS="-DONNX_USE_PROTOBUF_SHARED_LIBS=OFF -DProtobuf_USE_STATIC_LIBS=ON -DONNX_USE_LITE_PROTO=ON -DCMAKE_TOOLCHAIN_FILE=C:/vcpkg/scripts/buildsystems/vcpkg.cmake -DVCPKG_TARGET_TRIPLET=$(buildArch)-windows-static"
       python setup.py bdist_wheel
       python -m pip uninstall -y onnx
       Get-ChildItem -Path dist/*.whl | foreach {pip --disable-pip-version-check install --upgrade $_.fullname}   
      workingDirectory: '$(Build.SourcesDirectory)\cmake\external\onnx'      
      displayName: 'Install ONNX'    

    - template: set-test-data-variables-step.yml
    - template: set-version-number-variables-step.yml

    - task: PythonScript@0
      displayName: 'Generate cmake config'
      inputs:
        scriptPath: '$(Build.SourcesDirectory)\tools\ci_build\build.py'
        arguments: '--config RelWithDebInfo --enable_lto --disable_rtti --build_dir $(Build.BinariesDirectory) --skip_submodule_sync --build_shared_lib --update --cmake_generator "Visual Studio 16 2019" ${{ parameters.AdditionalBuildFlags }} --build_shared_lib --enable_onnx_tests --enable_wcos  --use_winml $(TelemetryOption) $(buildparameter)'
        workingDirectory: '$(Build.BinariesDirectory)'
 
    - task: VSBuild@1
      displayName: 'Build'
      inputs:
        solution: '$(Build.BinariesDirectory)\RelWithDebInfo\onnxruntime.sln'
        platform: $(msbuildPlatform)
        configuration: RelWithDebInfo
        msbuildArchitecture: $(buildArch)
        maximumCpuCount: true
        logProjectEvents: true
        workingFolder: '$(Build.BinariesDirectory)\RelWithDebInfo'
        createLogFile: true

    - task: PythonScript@0
      displayName: 'test'
      condition: and(succeeded(), eq(variables.runTests, true))
      inputs:
        scriptPath: '$(Build.SourcesDirectory)\tools\ci_build\build.py'
        arguments: '--config RelWithDebInfo --enable_lto --disable_rtti --build_dir $(Build.BinariesDirectory) --skip_submodule_sync --build_shared_lib --test --cmake_generator "Visual Studio 16 2019" ${{ parameters.AdditionalBuildFlags }} --build_shared_lib --enable_onnx_tests --enable_wcos  --use_winml $(TelemetryOption) $(buildparameter)'
        workingDirectory: '$(Build.BinariesDirectory)'

    - script: |
       dir *.dll
       mkdir $(Build.ArtifactStagingDirectory)\testdata
      workingDirectory: '$(Build.BinariesDirectory)/RelWithDebInfo/RelWithDebInfo'
      displayName: 'List built DLLs' 

    - template: c-api-artifacts-package-and-publish-steps-windows.yml
      parameters:
        buildConfig: RelWithDebInfo
        artifactName: 'onnxruntime-win-$(packageName)-$(OnnxRuntimeVersion)'
        artifactNameNoVersionString: 'onnxruntime-win-$(packageName)'
        commitId: $(OnnxRuntimeGitCommitHash)
        DoEsrp: ${{ parameters.DoEsrp }}

    #Upload protoc.exe, which will be used in nuget build for generating C# files
    - task: PublishPipelineArtifact@1
      condition: and(succeeded(), eq(variables.packageName, 'x64'))
      inputs:
        targetPath: '$(Build.BinariesDirectory)\RelWithDebInfo\external\protobuf\cmake\RelWithDebInfo\protoc.exe' 
        artifactName: 'drop-extra' 


    - task: CopyFiles@2
      displayName: 'Copy custom_op_library to: $(Build.ArtifactStagingDirectory)'
      condition: and(succeeded(), eq(variables.packageName, 'x64'))
      inputs:
        SourceFolder: '$(Build.BinariesDirectory)\RelWithDebInfo\RelWithDebInfo'
        Contents: 'custom_op_library.dll'
        TargetFolder: '$(Build.ArtifactStagingDirectory)/testdata'

    #To be used in test_win.yml
    - task: PublishPipelineArtifact@1
      condition: and(succeeded(), eq(variables.packageName, 'x64'))
      inputs:
        targetPath: '$(Build.BinariesDirectory)\RelWithDebInfo\external\protobuf\cmake\RelWithDebInfo\protoc.exe' 
        artifactName: 'drop-nuget'


    - task: CmdLine@2
      condition: and(succeeded(), eq(variables.build_java, true))
      inputs:
        script: |
          @echo on
          cd $(Build.SourcesDirectory)\java
          gradle cmakeCheck -DcmakeBuildDir=$(Build.BinariesDirectory)\RelWithDebInfo
          if %errorlevel% neq 0 exit /b %errorlevel%
          cd $(Build.BinariesDirectory)\RelWithDebInfo
          set NATIVE_FOLDER=$(Build.BinariesDirectory)\onnxruntime-java-win-$(msbuildPlatform)\stage\ai\onnxruntime\native\win-x64
          mkdir %NATIVE_FOLDER%
          echo "Directories created"
          copy .\java\build\libs\*.jar $(Build.BinariesDirectory)\onnxruntime-java-win-$(msbuildPlatform)
          pushd $(Build.BinariesDirectory)\onnxruntime-java-win-$(msbuildPlatform)
          set artifact_id=onnxruntime
          jar xf onnxruntime-$(OnnxRuntimeVersion).jar META-INF\maven\com.microsoft.onnxruntime\%artifact_id%\pom.xml
          move META-INF\maven\com.microsoft.onnxruntime\%artifact_id%\pom.xml onnxruntime-$(OnnxRuntimeVersion).pom
          rd /s /q META-INF
          popd
          copy .\RelWithDebInfo\onnxruntime.pdb %NATIVE_FOLDER%
          copy .\RelWithDebInfo\onnxruntime4j_jni.pdb %NATIVE_FOLDER%
          copy $(Build.SourcesDirectory)\docs\Privacy.md $(Build.BinariesDirectory)\onnxruntime-java-win-$(msbuildPlatform)\stage\Privacy.md
          copy $(Build.SourcesDirectory)\ThirdPartyNotices.txt $(Build.BinariesDirectory)\onnxruntime-java-win-$(msbuildPlatform)\stage\ThirdPartyNotices.txt
          @echo $(OnnxRuntimeGitCommitHash) > $(Build.BinariesDirectory)\onnxruntime-java-win-$(msbuildPlatform)\stage\GIT_COMMIT_ID
          pushd $(Build.BinariesDirectory)\onnxruntime-java-win-$(msbuildPlatform)\stage
          jar uf $(Build.BinariesDirectory)\onnxruntime-java-win-$(msbuildPlatform)\onnxruntime-$(OnnxRuntimeVersion).jar ai\onnxruntime\native\win-x64\onnxruntime.pdb
          jar uf $(Build.BinariesDirectory)\onnxruntime-java-win-$(msbuildPlatform)\onnxruntime-$(OnnxRuntimeVersion).jar ai\onnxruntime\native\win-x64\onnxruntime4j_jni.pdb
          jar uf $(Build.BinariesDirectory)\onnxruntime-java-win-$(msbuildPlatform)\onnxruntime-$(OnnxRuntimeVersion).jar Privacy.md ThirdPartyNotices.txt GIT_COMMIT_ID
          popd
          pushd $(Build.SourcesDirectory)\java\build\classes\java\test
          if %errorlevel% neq 0 exit /b %errorlevel%
          jar cvf $(Build.BinariesDirectory)\onnxruntime-java-win-$(msbuildPlatform)\testing.jar .
          if %errorlevel% neq 0 exit /b %errorlevel%
          popd
          pushd $(Build.SourcesDirectory)\java\build\resources\test
          rd /s /q ai\onnxruntime\native
          jar uvf $(Build.BinariesDirectory)\onnxruntime-java-win-$(msbuildPlatform)\testing.jar .
          popd
          rd /s /q $(Build.BinariesDirectory)\onnxruntime-java-win-$(msbuildPlatform)\stage
          dir /s /b $(Build.BinariesDirectory)\onnxruntime-java-win-$(msbuildPlatform)
        workingDirectory: '$(Build.BinariesDirectory)\RelWithDebInfo'
        displayName: 'Add symbols and notices to Java'    
      
    - task: PublishBuildArtifacts@1
      condition: and(succeeded(), eq(variables.build_java, true))
      displayName: 'Publish Java temp binaries'
      inputs:
        pathtoPublish: '$(Build.BinariesDirectory)\onnxruntime-java-win-$(msbuildPlatform)' 
        artifactName: 'drop-onnxruntime-java-win-$(msbuildPlatform)'

    - ${{ if eq(parameters['DoCompliance'], 'true') }}:
      - task: Semmle@0
        condition: and(succeeded(), eq(variables.build_java, true))
        inputs:
          sourceCodeDirectory: '$(Build.SourcesDirectory)\java'
          language: 'java'
          cleanupBuildCommands: 'C:\ProgramData\chocolatey\bin\gradle.exe -Dorg.gradle.daemon=false clean'
          buildCommands: 'C:\ProgramData\chocolatey\bin\gradle.exe -Dorg.gradle.daemon=false jar'
          querySuite: 'Recommended'
          timeout: '7200'
          ram: '16384'
          addProjectDirToScanningExclusionList: true

      - task: PythonScript@0
        displayName: 'Regenerate cmake config with STATIC_ANALYSIS=ON '
        inputs:
          scriptPath: '$(Build.SourcesDirectory)\tools\ci_build\build.py'
          arguments: '--config RelWithDebInfo --enable_lto --disable_rtti --build_dir $(Build.BinariesDirectory) --skip_submodule_sync --build_shared_lib --update --cmake_generator "Visual Studio 16 2019" ${{ parameters.AdditionalBuildFlags }} --build_shared_lib --enable_onnx_tests --enable_wcos  --use_winml $(TelemetryOption) $(buildparameter) --cmake_extra_defines onnxruntime_ENABLE_STATIC_ANALYSIS=ON'
          workingDirectory: '$(Build.BinariesDirectory)'

      - template: compliance.yml
        parameters :
          msbuildPlatform: $(msbuildPlatform)

    - template: component-governance-component-detection-steps.yml
      parameters :
        condition : 'succeeded'

    - task: mspremier.PostBuildCleanup.PostBuildCleanup-task.PostBuildCleanup@3
      displayName: 'Clean Agent Directories'
      condition: always()



- job: Jar_Packaging
  workspace:
    clean: all
  pool: 'Win-CPU-2019'
  dependsOn:
  - Linux_C_API_Packaging_CPU_x64
  - MacOS_C_API_Packaging_CPU_x64
  - Windows_Packaging_CPU
  condition: succeeded()
  steps:
  - template: set-version-number-variables-step.yml

  - task: DownloadPipelineArtifact@2
    displayName: 'Download Pipeline Artifact - Win x64'
    inputs:
      buildType: 'current'
      artifactName: 'drop-onnxruntime-java-win-x64'
      targetPath: '$(Build.BinariesDirectory)\java-artifact\onnxruntime-java-win-x64'

  - task: DownloadPipelineArtifact@2
    displayName: 'Download Pipeline Artifact - Linux x64'
    inputs:
      buildType: 'current'
      artifactName: 'drop-onnxruntime-java-linux-x64'
      targetPath: '$(Build.BinariesDirectory)\java-artifact'

  - task: DownloadPipelineArtifact@2
    displayName: 'Download Pipeline Artifact - MacOS x64'
    inputs:
      buildType: 'current'
      artifactName: 'drop-onnxruntime-java-osx-x64'
      targetPath: '$(Build.BinariesDirectory)\java-artifact'  

  - task: ExtractFiles@1
    inputs:
      archiveFilePatterns: '$(Build.BinariesDirectory)\java-artifact\onnxruntime-java-linux-x64.zip'
      destinationFolder: '$(Build.BinariesDirectory)\java-artifact'
      cleanDestinationFolder: false

  - task: ExtractFiles@1
    inputs:
      archiveFilePatterns: '$(Build.BinariesDirectory)\java-artifact\onnxruntime-java-osx-x64.zip'
      destinationFolder: '$(Build.BinariesDirectory)\java-artifact'
      cleanDestinationFolder: false
 
  - task: CmdLine@2
    inputs:
      script: |
        @echo on
        pushd onnxruntime-java-linux-x64
        jar uf  $(Build.BinariesDirectory)\java-artifact\onnxruntime-java-win-x64\testing.jar libcustom_op_library.so
        del /F /Q libcustom_op_library.so
        jar uf  $(Build.BinariesDirectory)\java-artifact\onnxruntime-java-win-x64\onnxruntime-$(OnnxRuntimeVersion).jar .
        popd
        pushd onnxruntime-java-osx-x64
        jar uf  $(Build.BinariesDirectory)\java-artifact\onnxruntime-java-win-x64\testing.jar libcustom_op_library.dylib
        del /F /Q libcustom_op_library.dylib
        jar uf  $(Build.BinariesDirectory)\java-artifact\onnxruntime-java-win-x64\onnxruntime-$(OnnxRuntimeVersion).jar .
        popd
      workingDirectory: '$(Build.BinariesDirectory)\java-artifact'

  - task: PublishPipelineArtifact@1
    inputs:
      targetPath: '$(Build.BinariesDirectory)\java-artifact\onnxruntime-java-win-x64'
      artifact: 'onnxruntime-java'
      publishLocation: 'pipeline'

  - template: component-governance-component-detection-steps.yml
    parameters :
      condition : 'succeeded'

- job: NuGet_Packaging
  workspace:
    clean: all
  pool: 'Win-CPU-2019'
  variables:
    OrtPackageId: ${{ parameters.OrtNugetPackageId }}
  dependsOn:
  - Linux_C_API_Packaging_CPU_x64
  - MacOS_C_API_Packaging_CPU_x64
  - Windows_Packaging_CPU
  condition: succeeded()
  steps: 
  - task: DownloadPipelineArtifact@0
    displayName: 'Download Pipeline Artifact - NuGet'
    inputs:
      artifactName: 'onnxruntime-win-x64'
      targetPath: '$(Build.BinariesDirectory)/nuget-artifact'

  - task: DownloadPipelineArtifact@0
    displayName: 'Download Pipeline Artifact - NuGet'
    inputs:
      artifactName: 'onnxruntime-win-x86'
      targetPath: '$(Build.BinariesDirectory)/nuget-artifact'
      
  - task: DownloadPipelineArtifact@0
    displayName: 'Download Pipeline Artifact - NuGet'
    inputs:
      artifactName: 'onnxruntime-win-arm64'
      targetPath: '$(Build.BinariesDirectory)/nuget-artifact'

  - task: DownloadPipelineArtifact@0
    displayName: 'Download Pipeline Artifact - NuGet'
    inputs:
      artifactName: 'onnxruntime-win-arm'
      targetPath: '$(Build.BinariesDirectory)/nuget-artifact'

  - task: DownloadPipelineArtifact@0
    displayName: 'Download Pipeline Artifact - NuGet'
    inputs:
      artifactName: 'onnxruntime-osx-x64'
      targetPath: '$(Build.BinariesDirectory)/nuget-artifact'

  - task: DownloadPipelineArtifact@0
    displayName: 'Download Pipeline Artifact - NuGet'
    inputs:
      artifactName: 'onnxruntime-linux-x64'
      targetPath: '$(Build.BinariesDirectory)/nuget-artifact'

  - task: DownloadPipelineArtifact@0
    displayName: 'Download Pipeline Artifact - NuGet'
    inputs:
      artifactName: 'drop-extra'
      targetPath: '$(Build.BinariesDirectory)/extra-artifact'

  #Reconstruct the build dir
  - task: PowerShell@2
    displayName: 'PowerShell Script'
    inputs:
      targetType: filePath
      filePath: $(Build.SourcesDirectory)\tools\ci_build\github\windows\extract_nuget_files.ps1

  - script: |
     dir
    workingDirectory: '$(Build.BinariesDirectory)/nuget-artifact'
    displayName: 'List artifacts'

  - script: |
     mklink /D /J models C:\local\models
    workingDirectory: '$(Build.BinariesDirectory)'
    displayName: 'Create models link'

  - task: NuGetToolInstaller@0
    displayName: Use Nuget 5.7.0
    inputs:
      versionSpec: 5.7.0

  - task: DotNetCoreCLI@2
    displayName: 'Restore nuget packages'
    inputs:
      command: restore
      projects: '$(Build.SourcesDirectory)\csharp\OnnxRuntime.CSharp.sln'
      configuration: RelWithDebInfo
      arguments: '--configuration RelWithDebInfo -p:Platform="Any CPU" -p:OrtPackageId=$(OrtPackageId)'
      workingDirectory: '$(Build.SourcesDirectory)\csharp'

  - task: DotNetCoreCLI@2
    displayName: 'Build C#'
    inputs:
      command: build
      projects: '$(Build.SourcesDirectory)\csharp\OnnxRuntime.CSharp.sln'
      configuration: RelWithDebInfo
      arguments: '--configuration RelWithDebInfo -p:Platform="Any CPU" -p:OnnxRuntimeBuildDirectory="$(Build.BinariesDirectory)" -p:OrtPackageId=$(OrtPackageId)'
      workingDirectory: '$(Build.SourcesDirectory)\csharp'

  - task: DotNetCoreCLI@2
    displayName: 'Build Nuget Packages'
    inputs:
      command: build
      projects: '$(Build.SourcesDirectory)\csharp\OnnxRuntime.CSharp.proj'
      configuration: RelWithDebInfo
      arguments: '--configuration RelWithDebInfo -t:CreatePackage -p:Platform="Any CPU" -p:OnnxRuntimeBuildDirectory="$(Build.BinariesDirectory)" -p:OrtPackageId=$(OrtPackageId)'
      workingDirectory: '$(Build.SourcesDirectory)\csharp'
        
  - template: win-esrp-dll.yml
    parameters:
      FolderPath: '$(Build.SourcesDirectory)\csharp\src\Microsoft.ML.OnnxRuntime\bin\RelWithDebInfo'
      DisplayName: 'ESRP - Sign C# dlls'
      DoEsrp: ${{ parameters.DoEsrp }}

  - task: BatchScript@1
    displayName: 'Bundle Native NuGet and other binaries'
    inputs:
      filename: $(Build.SourcesDirectory)\tools\ci_build\github\windows\bundle_dlls.bat
      workingFolder: $(Build.BinariesDirectory)\RelWithDebInfo\RelWithDebInfo\nuget-artifacts

  - task: CopyFiles@2
    displayName: 'Copy nuget packages to: $(Build.ArtifactStagingDirectory)'
    inputs:
      SourceFolder: '$(Build.BinariesDirectory)\RelWithDebInfo\RelWithDebInfo\nuget-artifacts'
      Contents: '*.nupkg'
      TargetFolder: '$(Build.ArtifactStagingDirectory)'

  - task: CopyFiles@2
    displayName: 'Copy nuget packages to: $(Build.ArtifactStagingDirectory)'
    inputs:
      SourceFolder: '$(Build.SourcesDirectory)\csharp\src\Microsoft.ML.OnnxRuntime\bin\RelWithDebInfo'
      Contents: '*.nupkg'
      TargetFolder: '$(Build.ArtifactStagingDirectory)'

  - template: esrp_nuget.yml
    parameters:
      DisplayName: 'ESRP - sign NuGet package'
      FolderPath: '$(Build.ArtifactStagingDirectory)'
      DoEsrp: ${{ parameters.DoEsrp }}

  - template: validate-nuget.yml
    parameters:
      NugetPath: '$(Build.ArtifactStagingDirectory)'
      NugetPackage: 'Microsoft.ML.OnnxRuntime.*nupkg'
      PlatformsSupported: 'win-x64,win-x86,linux-x64,osx-x64'
      VerifyNugetSigning: false

  - task: PublishPipelineArtifact@0
    displayName: 'Publish Pipeline NuGet Artifact'
    inputs:
      artifactName: 'drop-signed-nuget'
      targetPath: '$(Build.ArtifactStagingDirectory)'

  - task: RoslynAnalyzers@2
    displayName: 'Run Roslyn Analyzers'
    inputs:
      userProvideBuildInfo: msBuildInfo
      msBuildArchitecture: 'Any CPU'
      msBuildCommandline: '"C:\Program Files\dotnet\dotnet.exe" build $(Build.SourcesDirectory)\csharp\OnnxRuntime.CSharp.sln --configuration RelWithDebInfo -p:Platform="Any CPU" -p:OnnxRuntimeBuildDirectory="$(Build.BinariesDirectory)" -p:OrtPackageId=$(OrtPackageId)'
    condition: and(succeeded(), eq('${{ parameters.DoCompliance }}', true))

  - template: component-governance-component-detection-steps.yml
    parameters :
      condition : 'succeeded'

  - task: mspremier.PostBuildCleanup.PostBuildCleanup-task.PostBuildCleanup@3
    displayName: 'Clean Agent Directories'
    condition: always()

- template: ../nuget/templates/test_all_os.yml

- job: Publish_NuGet_Package_And_Report
  workspace:
    clean: all
  variables:
  - group: Dashboard_MySQL_Secret
  - name: GDN_CODESIGN_TARGETDIRECTORY
    value: '$(Build.BinariesDirectory)/nuget-artifact/final-package'
  pool: 'Win-CPU-2019'
  condition: and (succeeded(), and (${{ parameters.DoEsrp }}, eq(variables['Build.SourceBranch'], 'refs/heads/master')))
  dependsOn:
  - NuGet_Test_Win
  - NuGet_Test_Linux
  - NuGet_Test_MacOS
  steps:

  - template: set-version-number-variables-step.yml

  - template: ../nuget/templates/upload-binary-sizes-from-nuget-package.yml
    parameters:
      downloadPath: $(Build.BinariesDirectory)/nuget-artifact/final-package
      gitCommitHash: $(OnnxRuntimeGitCommitHashShort)  

  - template: ../nuget/templates/get-nuget-package-version-as-variable.yml
    parameters:
      packageFolder: '$(Build.BinariesDirectory)/nuget-artifact/final-package'

  - task: PowerShell@2
    displayName: 'Get Current Date'
    inputs:
      targetType: 'inline'
      script: |
          $date = $(Get-Date -Format "yyyy-MM-dd")
          Write-Host "##vso[task.setvariable variable=CurrentDate]$date"

  - task: AzureFileCopy@3
    displayName: 'Copy Signed Native NuGet Package to Blob Store'
    condition: ne(variables['IsReleaseBuild'], 'true') # release build has a different package naming scheme
    inputs:
      sourcePath: '$(Build.BinariesDirectory)/nuget-artifact/final-package/Microsoft.ML.OnnxRuntime.$(NuGetPackageVersionNumber).nupkg'
      azureSubscription: 'AIInfraBuildOnnxRuntimeOSS'
      destination: azureBlob
      storage: ortpackages
      containerName: ortpackages
      blobPrefix: '$(CurrentDate)/'
    continueOnError: true

  - task: AzureFileCopy@3
    displayName: 'Copy Signed Managed NuGet Package to Blob Store'
    condition: ne(variables['IsReleaseBuild'], 'true') # release build has a different package naming scheme
    inputs:
      sourcePath: '$(Build.BinariesDirectory)/nuget-artifact/final-package/Microsoft.ML.OnnxRuntime.Managed.$(NuGetPackageVersionNumber).nupkg'
      azureSubscription: 'AIInfraBuildOnnxRuntimeOSS'
      destination: azureBlob
      storage: ortpackages
      containerName: ortpackages
      blobPrefix: '$(CurrentDate)/'
    continueOnError: true

  - task: DotNetCoreCLI@2
    displayName: 'Copy Signed Native NuGet Package to Internal NuGet Feed'
    condition: ne(variables['IsReleaseBuild'], 'true') # release build has a different package naming scheme
    inputs:
      command: 'push'
      searchPatternPush: '$(Build.BinariesDirectory)/nuget-artifact/final-package/Microsoft.ML.OnnxRuntime.$(NuGetPackageVersionNumber).nupkg'
      feedPublish: 'OnnxRuntime'

  - task: DotNetCoreCLI@2
    displayName: 'Copy Signed Managed NuGet Package to Internal NuGet Feed'
    condition: ne(variables['IsReleaseBuild'], 'true') # release build has a different package naming scheme
    inputs:
      command: 'push'
      searchPatternPush: '$(Build.BinariesDirectory)/nuget-artifact/final-package/Microsoft.ML.OnnxRuntime.Managed.$(NuGetPackageVersionNumber).nupkg'
      feedPublish: 'OnnxRuntime'

  - task: NuGetCommand@2
    displayName: 'Copy Signed Native NuGet Package to ORT-NIGHTLY'
    condition: ne(variables['IsReleaseBuild'], 'true') # release build has a different package naming scheme
    inputs:
      command: 'push'
      packagesToPush: '$(Build.BinariesDirectory)/nuget-artifact/final-package/Microsoft.ML.OnnxRuntime.$(NuGetPackageVersionNumber).nupkg'
      publishVstsFeed: '2692857e-05ef-43b4-ba9c-ccf1c22c437c/7982ae20-ed19-4a35-a362-a96ac99897b7'

  - task: NuGetCommand@2
    displayName: 'Copy Signed Managed NuGet Package to ORT-NIGHTLY'
    condition: ne(variables['IsReleaseBuild'], 'true') # release build has a different package naming scheme
    inputs:
      command: 'push'
      packagesToPush: '$(Build.BinariesDirectory)/nuget-artifact/final-package/Microsoft.ML.OnnxRuntime.Managed.$(NuGetPackageVersionNumber).nupkg'
      publishVstsFeed: '2692857e-05ef-43b4-ba9c-ccf1c22c437c/7982ae20-ed19-4a35-a362-a96ac99897b7'

  - task: mspremier.PostBuildCleanup.PostBuildCleanup-task.PostBuildCleanup@3
    displayName: 'Clean Agent Directories'
    condition: always()

- job: Final_Jar_Testing_Windows
  workspace:
    clean: all
  pool: 'Win-CPU-2019'
  timeoutInMinutes: 60
  dependsOn:
    Jar_Packaging
  steps:
  - template: set-version-number-variables-step.yml

  - task: DownloadPipelineArtifact@2
    displayName: 'Download Final Jar'
    inputs:
        buildType: 'current'
        artifactName: 'onnxruntime-java'
        targetPath: '$(Build.BinariesDirectory)\final-jar'

  - task: CmdLine@2
    inputs:
      script: |
        mkdir test 
        pushd test
        jar xf $(Build.BinariesDirectory)\final-jar\testing.jar
        popd
        powershell -Command "Invoke-WebRequest https://oss.sonatype.org/service/local/repositories/releases/content/org/junit/platform/junit-platform-console-standalone/1.6.2/junit-platform-console-standalone-1.6.2.jar -OutFile junit-platform-console-standalone-1.6.2.jar"
        powershell -Command "Invoke-WebRequest https://oss.sonatype.org/service/local/repositories/google-releases/content/com/google/protobuf/protobuf-java/3.9.2/protobuf-java-3.9.2.jar -OutFile protobuf-java-3.9.2.jar"
        java -jar junit-platform-console-standalone-1.6.2.jar -cp .;.\test;protobuf-java-3.9.2.jar;onnxruntime-$(OnnxRuntimeVersion).jar --scan-class-path --fail-if-no-tests --disable-banner
      workingDirectory: '$(Build.BinariesDirectory)\final-jar'

- job: Final_Jar_Testing_Linux
  workspace:
    clean: all
  pool: 'Linux-CPU'
  timeoutInMinutes: 60
  dependsOn:
    Jar_Packaging
  steps:
  - template: set-version-number-variables-step.yml
  - task: DownloadPipelineArtifact@2
    displayName: 'Download Final Jar'
    inputs:
      buildType: 'current'
      artifactName: 'onnxruntime-java'
      targetPath: '$(Build.BinariesDirectory)/final-jar'

  - task: CmdLine@2
    inputs:
      script: |
        sudo apt-get install -y openjdk-8-jdk
        sudo apt autoremove
        PATH=/usr/lib/jvm/jre-1.8.0-openjdk.x86_64/bin:${PATH}
        echo "Java Version"
        java --version
        mkdir test
        pushd test
        jar xf $(Build.BinariesDirectory)/final-jar/testing.jar
        popd
        wget https://oss.sonatype.org/service/local/repositories/releases/content/org/junit/platform/junit-platform-console-standalone/1.6.2/junit-platform-console-standalone-1.6.2.jar -P ./
        wget https://oss.sonatype.org/service/local/repositories/google-releases/content/com/google/protobuf/protobuf-java/3.9.2/protobuf-java-3.9.2.jar -P ./
        LD_LIBRARY_PATH=./test:${LD_LIBRARY_PATH}
        java -jar ./junit-platform-console-standalone-1.6.2.jar -cp .:./test:./protobuf-java-3.9.2.jar:./onnxruntime-$(OnnxRuntimeVersion).jar --scan-class-path --fail-if-no-tests --disable-banner
      workingDirectory: '$(Build.BinariesDirectory)/final-jar'

- job: Final_Jar_Testing_MacOs
  workspace:
    clean: all
  pool: 
    vmImage: 'macOS-10.14'
  timeoutInMinutes: 60
  dependsOn:
    Jar_Packaging
  steps:
  - template: set-version-number-variables-step.yml

  - task: DownloadPipelineArtifact@2
    displayName: 'Download Final Jar'
    inputs:
      buildType: 'current'
      artifactName: 'onnxruntime-java'
      targetPath: '$(Build.BinariesDirectory)/final-jar'

  - task: CmdLine@2
    inputs:
        script: |
          echo "Java Version"
          java --version
          mkdir test
          pushd test
          jar xf $(Build.BinariesDirectory)/final-jar/testing.jar
          popd
          wget https://oss.sonatype.org/service/local/repositories/releases/content/org/junit/platform/junit-platform-console-standalone/1.6.2/junit-platform-console-standalone-1.6.2.jar -P ./
          wget https://oss.sonatype.org/service/local/repositories/google-releases/content/com/google/protobuf/protobuf-java/3.9.2/protobuf-java-3.9.2.jar -P ./
          DYLD_LIBRARY_PATH=./test:${DYLD_LIBRARY_PATH}
          java -jar ./junit-platform-console-standalone-1.6.2.jar -cp .:./test:./protobuf-java-3.9.2.jar:./onnxruntime-$(OnnxRuntimeVersion).jar --scan-class-path --fail-if-no-tests --disable-banner
        workingDirectory: '$(Build.BinariesDirectory)/final-jar'

